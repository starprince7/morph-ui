// lib/ai-generator.ts
import 'server-only';
import OpenAI from 'openai';
import { AIComponentResponse, APIDataResponse, ComponentGenerationOptions } from './types';
import { validateComponentCode } from './security';
import { GPT_SYSTEM_PROMPT } from './system-prompts/gpt-system-prompt';

// Initialize OpenAI client
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

/**
 * Fetches data from external API with caching
 */
async function fetchAPIData(cacheOptions?: ComponentGenerationOptions): Promise<APIDataResponse> {
  const apiUrl = 'https://api.starprince.dev/api/vehicle/listing';

  try {
    const response = await fetch(apiUrl, {
      cache: 'force-cache',
      next: {
        revalidate: cacheOptions?.revalidate || 300 // 5 minutes default
      }
    });

    if (!response.ok) {
      throw new Error(`API request failed: ${response.status}`);
    }

    const data = await response.json();

    return {
      data,
      timestamp: new Date().toISOString(),
      source: apiUrl,
    };
  } catch (error) {
    console.error('API fetch error:', error);
    throw new Error(`Failed to fetch data: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

/**
 * Generates a fallback component when OpenAI is not available
 */
function generateFallbackComponent(data: any): string {
  const dataPreview = JSON.stringify(data, null, 2).slice(0, 200) + '...';

  return `'use client';

function GeneratedDataComponent() {
  const React = require('react');
  
  return React.createElement('div', {
    className: 'p-6 border border-yellow-200 dark:border-yellow-800 rounded-lg bg-yellow-50 dark:bg-yellow-900/20'
  },
    React.createElement('div', {
      className: 'text-center'
    },
      React.createElement('h3', {
        className: 'text-lg font-semibold text-yellow-800 dark:text-yellow-200 mb-2'
      }, 'Demo Mode - OpenAI Not Configured'),
      React.createElement('p', {
        className: 'text-sm text-yellow-600 dark:text-yellow-400 mb-4'
      }, 'This is a fallback component. Configure your OpenAI API key to see AI-generated content.'),
      React.createElement('pre', {
        className: 'text-xs bg-yellow-100 dark:bg-yellow-900/40 p-3 rounded text-left overflow-auto'
      }, 'Data Preview:\n' + \`${dataPreview}\`)
    )
  );
}`;
}

/**
 * Generates AI component code using OpenAI
 */
async function generateAiCode(data: any): Promise<string> {
  if (!process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY.includes('your_openai_api_key_here')) {
    console.warn('OpenAI API key not configured, using fallback component');
    return generateFallbackComponent(data);
  }

  try {
    const completion = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [
        {
          role: 'system',
          content: GPT_SYSTEM_PROMPT,
        },
        {
          role: 'user',
          content: `Generate a React component to display this data in an intuitive, responsive interface:

${JSON.stringify(data, null, 2)}

Create a component that:
- Displays the data in an organized, visually appealing way
- Is fully responsive (mobile-first)
- Uses proper Tailwind CSS styling
- Includes loading states and error handling
- Follows accessibility best practices
- Has interactive elements where appropriate`,
        },
      ],
      temperature: 0.7,
      max_tokens: 2000,
    });

    const generatedCode = completion.choices[0].message.content;

    if (!generatedCode) {
      throw new Error('No code generated by AI');
    }

    return generatedCode.trim();
  } catch (error) {
    console.error('OpenAI generation error:', error);
    throw new Error(`Failed to generate component: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

/**
 * Main function to generate AI component with full error handling and security
 */
export async function generateAIComponent(options?: ComponentGenerationOptions): Promise<AIComponentResponse> {
  const startTime = Date.now();

  try {
    // Step 1: Fetch data from API
    console.log('Fetching API data...');
    const apiData = await fetchAPIData(options);

    // Step 2: Generate component code using AI
    console.log('Generating component code...');
    const componentCode = await generateAiCode(apiData.data);
    console.log('Component Code:', componentCode)

    // Step 3: Validate and sanitize the generated code
    console.log('Validating component code...');
    const validation = validateComponentCode(componentCode);

    if (!validation.isValid) {
      console.error('Component validation failed:', validation.errors);
      return {
        success: false,
        component: '',
        componentName: 'GeneratedDataComponent',
        error: `Component validation failed: ${validation.errors.join(', ')}`,
        metadata: {
          generatedAt: new Date().toISOString(),
          dataSource: apiData.source,
          cacheKey: options?.cacheKey || 'default',
        },
      };
    }

    const generationTime = Date.now() - startTime;
    console.log(`Component generated successfully in ${generationTime}ms`);

    return {
      success: true,
      component: validation.sanitizedCode!,
      componentName: 'GeneratedDataComponent',
      metadata: {
        generatedAt: new Date().toISOString(),
        dataSource: apiData.source,
        cacheKey: options?.cacheKey || 'default',
      },
    };
  } catch (error) {
    // If error occurs, do these below.
    console.error('Component generation failed:', error);

    return {
      success: false,
      component: '',
      componentName: 'GeneratedDataComponent',
      error: error instanceof Error ? error.message : 'Unknown error occurred',
      metadata: {
        generatedAt: new Date().toISOString(),
        dataSource: 'unknown',
        cacheKey: options?.cacheKey || 'default',
      },
    };
  }
}

/**
 * Fallback component code for when AI generation fails
 */
export const FALLBACK_COMPONENT = `'use client';

function GeneratedDataComponent() {
  const React = require('react');
  
  return React.createElement('div', {
    className: 'flex flex-col items-center justify-center p-8 border border-gray-200 dark:border-gray-800 rounded-lg bg-gray-50 dark:bg-gray-900'
  },
    React.createElement('div', {
      className: 'text-center'
    },
      React.createElement('h3', {
        className: 'text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2'
      }, 'Component Generation Failed'),
      React.createElement('p', {
        className: 'text-sm text-gray-600 dark:text-gray-400'
      }, 'Unable to generate dynamic content. Please try again later.')
    )
  );
}`;
